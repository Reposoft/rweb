<?xml version="1.0"?>
<document>

  <properties>
    <title>Repos Coding Standard</title>
  </properties>

  <body>
    <section name="Programming">
      <p>To allow everyone to change anyone's code, we all need the same coding standards. For Java, PHP and Javascript, pleas consult your buddy <a target="_blank" href="Sun's Code Conventions">http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.html</a></p>
	  <p>Some areas of confilct: <a target="_blank" href="http://java.sun.com/docs/codeconv/html/CodeConventions.doc6.html#449">curly braces</a> and <a href="http://java.sun.com/docs/codeconv/html/CodeConventions.doc4.html#680">method documentation</a></p>

      <subsection name="Java">
         <p>See the above</p>
      </subsection>
      
      <subsection name="PHP">
         <p>PHP is a scripting language. If you find yourself craving for classes, you should switch to Java. Strong typing and real Unit Test reduces the risk of disappointment</p>
      	 <p>Use double quotes for all strings. The exception is if you really _need_ to treat HTML in strings.</p>
	  </subsection>

		<subsection name="Javascript">
			<p>Try to keep javascript functions shorter than ten lines of code.</p>
		</subsection>
    </section>
	
	<section name="XSLT">
		<p>Neither XML nor XSLT should contain any time-dependent information. The exact same document shuld be valid next year too.</p>
		<subsection name="What about today's date?">
			<p>Use javascript to display today's date, etcetera.</p>
		</subsection>
		<subsection name="Sorting">
			<p>Sadly, XSLT has no access to query string parameters. This is not a problem, except for when we want to allow the user to choose what filed to sort on. The best solution is to create one hidden layer for each sorting option. Make the default sorting order visible. Then use the sort functions in everywhere.js when user wants to sort.</p>
		</subsection>
	</section>
	
  </body>
</document>
