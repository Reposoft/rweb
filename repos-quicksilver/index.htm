<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
<title>Index page using repos-quicksilver</title>

<script type="text/javascript">

/*
	This sourcecode is copyrighted... och nåt annat bra att säga...
*/
	document.write('<link href="css/quicksilver.css" rel="stylesheet" type="text/css" />');

	/*global vars*/
	var emod; /*the event model*/
	var altDown = false;
	var linkCache = new Array();
	var Q_KEY = 81;

	function document_onKeyDown(){
		var e = window.event;
		altDown = (e.altKey) ? true : false;
		if(e.keyCode == 81 && altDown){
			showQuickSilverWindow();
		}
		return false;
	}
	
	function showQuickSilverWindow(){
		var qsWin = null;
//		var e = window.event;
//		altDown = (e.altKey) ? true : false;
//		if(e.keyCode == 81 && altDown){
			qsWin = getQSWindow();
			document.getElementById("autosuggest").style.display = 'block';		
//			qsWin.show;
//		}
	}
	
	function txtQSSearch_onChange(){
		
	}
	
	function linkObject(text, url){
		this.text = text.toString();
		this.url = url.toString();
	}
	
	function getQSWindow(){
		var qsWin = document.getElementById("qsWindow");
//		var qsWin = document.getElementById("autosuggest");
		
/*		if(!qsWin){
			var txtQSSearch = document.createElement("input");
			txtQSSearch.id = 'txtQuickSilverSearch';
			txtQSSearch.type = 'text';
			qsWin = document.createElement("div");
			qsWin.className = "qsWindow";
			qsWin.zIndex = 32767;
			qsWin.id = 'qsWindow';
			qsWin.appendChild(txtQSSearch);
			document.body.appendChild(qsWin);
			qsWin = document.getElementById("qsWindow");
		}
		qsWin.prototype.show = function(){
			document.getElementById("autosuggest").style.display = 'block';
		}
		
		qsWin.prototype.hide = function (){
			document.getElementById("autosuggest").style.display = 'none';
		}*/
		return qsWin;
		
/*		function show(){
			document.getElementById("qsWindow").style.display = 'block';
		}
		
		function hide(){
			document.getElementById("qsWindow").style.display = 'none';
		}*/
	}
	
		
	function indexLinks(s){
		var as = document.body.getElementsByTagName("a");
		for(ix in as){
			if(as[ix].childNodes){
				linkCache.push(new linkObject(as[ix].childNodes[0].data, as[ix]));
			}
		}
	}
	
	function document_onLoad(){		  
		indexLinks();
	}
	
//	document.onkeydown = document_onKeyDown;
	
</script>

<script type="text/javascript">
function AutoSuggest(elem, suggestions)
{

	//The 'me' variable allow you to access the AutoSuggest object
	//from the elem's event handlers defined below.
	var me = this;

	//A reference to the element we're binding the list to.
	this.elem = elem;

	this.suggestions = suggestions;

	//Arrow to store a subset of eligible suggestions that match the user's input
	this.eligible = new Array();

	//The text input by the user.
	this.inputText = null;

	//A pointer to the index of the highlighted eligible item. -1 means nothing highlighted.
	this.highlighted = -1;

	//A div to use to create the dropdown.
	this.div = document.getElementById("autosuggest");


	//Do you want to remember what keycode means what? Me neither.
	var TAB = 9;
	var ESC = 27;
	var KEYUP = 38;
	var KEYDN = 40;
	var ENTER = 13;
	

	//The browsers' own autocomplete feature can be problematic, since it will 
	//be making suggestions from the users' past input.
	//Setting this attribute should turn it off.
	elem.setAttribute("autocomplete","off");

	//We need to be able to reference the elem by id. If it doesn't have an id, set one.
	if(!elem.id)
	{
		var id = "autosuggest" + idCounter;
		idCounter++;

		elem.id = id;
	}

	// Change this to customize the display text of a suggestiong 
	this.getDisplayName = function(suggestion) {
		// treat the item as a string
		return "link: " + suggestion.text;
	}
	
	// returns the text for an alternative, to be matched agains the search string
	this.getIndexedText = function(suggestion) {
		return suggestion.text.toLowerCase();
	}
	
	// returns the search string used to filter indexed texts
	this.getSearchText = function() {
		return this.inputText.toLowerCase();
	}

	// Change this to customize the behaviour when an item is selected
	this.followLink = function(selectedSuggestion)
	{
		// treat the item as a query parameter
		alert(selectedSuggestion.url);
		location.href = selectedSuggestion.url;
	}

	/********************************************************
	onkeydown event handler for the input elem.
	Tab key = use the highlighted suggestion, if there is one.
	Esc key = get rid of the autosuggest dropdown
	Up/down arrows = Move the highlight up and down in the suggestions.
	********************************************************/
	elem.onkeydown = function(ev)
	{
		var key = me.getKeyCode(ev);

		switch(key)
		{
			case ENTER:
			me.useSuggestion();
			break;
		
			case TAB:
			me.useSuggestion();
			break;

			case ESC:
			me.hideDiv();
			break;

			case KEYUP:
			if (me.highlighted > 0)
			{
				me.highlighted--;
			}
			me.changeHighlight(key);
			break;

			case KEYDN:
			if (me.highlighted < (me.eligible.length - 1))
			{
				me.highlighted++;
			}
			me.changeHighlight(key);
			
			break;
		}
	};

	/********************************************************
	onkeyup handler for the elem
	If the text is of sufficient length, and has been changed, 
	then display a list of eligible suggestions.
	********************************************************/
	elem.onkeyup = function(ev) 
	{
		var key = me.getKeyCode(ev);
		switch(key)
		{
		//The control keys were already handled by onkeydown, so do nothing.
		case TAB:
		case ESC:
		case KEYUP:
		case KEYDN:
			return;
		default:

			if (this.value != me.inputText && this.value.length > 0)
			{
				me.inputText = this.value;
				me.getEligible();
				me.createDiv();
				me.positionDiv();
				me.showDiv();
			}
			else
			{
				me.hideDiv();
			}
		}
	};


	/********************************************************
	Insert the highlighted suggestion into the input box, and 
	remove the suggestion dropdown.
	********************************************************/
	this.useSuggestion = function()
	{
		if (this.highlighted > -1)
		{
//			// set input box value to the complete name
//			this.elem.value = this.eligible[this.highlighted].text;
			this.elem.value = "";
			// store the selected element to use that link
			var selectedLink = this.eligible[this.highlighted];
			// close quicksilver window
			this.hideDiv();
			//It's impossible to cancel the Tab key's default behavior. 
			//So this undoes it by moving the focus back to our field right after
			//the event completes.
			setTimeout("document.getElementById('" + this.elem.id + "').focus()",0);
			// follow the selected link
			this.followLink(selectedLink);
		}
	};

	/********************************************************
	Display the dropdown. Pretty straightforward.
	********************************************************/
	this.showDiv = function()
	{
		this.div.style.display = 'block';
	};

	/********************************************************
	Hide the dropdown and clear any highlight.
	********************************************************/
	this.hideDiv = function()
	{
		this.div.style.display = 'none';
		this.highlighted = -1;
	};

	/********************************************************
	Modify the HTML in the dropdown to move the highlight.
	********************************************************/
	this.changeHighlight = function()
	{
		var lis = this.div.getElementsByTagName('LI');
		for (i in lis)
		{
			var li = lis[i];

			if (this.highlighted == i)
			{
				li.className = "selected";
			}
			else
			{
				li.className = "";
			}
		}
	};

	/********************************************************
	Position the dropdown div below the input text field.
	********************************************************/
	this.positionDiv = function()
	{
		var el = this.elem;
		var x = 0;
		var y = el.offsetHeight;
	
		//Walk up the DOM and add up all of the offset positions.
		while (el.offsetParent && el.tagName.toUpperCase() != 'BODY')
		{
			x += el.offsetLeft;
			y += el.offsetTop;
			el = el.offsetParent;
		}

		x += el.offsetLeft;
		y += el.offsetTop;

		this.div.style.left = x + 'px';
		this.div.style.top = y + 'px';
	};

	/********************************************************
	Build the HTML for the dropdown div
	********************************************************/
	this.createDiv = function()
	{
		var ul = document.createElement('ul');
	
		//Create an array of LI's for the words.
		for (i in this.eligible)
		{
			var word = this.getDisplayName(this.eligible[i]);
	
			var li = document.createElement('li');
			var a = document.createElement('a');
			a.href="javascript:false";
			a.innerHTML = word;
			li.appendChild(a);
	
			if (me.highlighted == i)
			{
				li.className = "selected";
			}
	
			ul.appendChild(li);
		}
	
		this.div.replaceChild(ul,this.div.childNodes[0]);
	

		/********************************************************
		mouseover handler for the dropdown ul
		move the highlighted suggestion with the mouse
		********************************************************/
		ul.onmouseover = function(ev)
		{
			//Walk up from target until you find the LI.
			var target = me.getEventSource(ev);
			while (target.parentNode && target.tagName.toUpperCase() != 'LI')
			{
				target = target.parentNode;
			}
		
			var lis = me.div.getElementsByTagName('LI');
			
	
			for (i in lis)
			{
				var li = lis[i];
				if(li == target)
				{
					me.highlighted = i;
					break;
				}
			}
			me.changeHighlight();
		};

		/********************************************************
		click handler for the dropdown ul
		insert the clicked suggestion into the input
		********************************************************/
		ul.onclick = function(ev)
		{
			me.useSuggestion();
			me.hideDiv();
			me.cancelEvent(ev);
			return false;
		};
	
		this.div.className="suggestion_list";
		this.div.style.position = 'absolute';

	};

	/********************************************************
	determine which of the suggestions matches the input
	********************************************************/
	this.getEligible = function()
	{
		this.eligible = new Array();
		var searchText = this.getSearchText();
		for (i in this.suggestions) 
		{
			var indexedText = this.getIndexedText(suggestions[i]);
			if(indexedText.indexOf(searchText) == "0")
			{
				this.eligible[this.eligible.length]=suggestions[i];
			}
		}
		// by default select the first item
		if (this.eligible.length > 0 && this.highlighted < 0) {
			this.highlighted = 0;
		}
	};

	/********************************************************
	Helper function to determine the keycode pressed in a 
	browser-independent manner.
	********************************************************/
	this.getKeyCode = function(ev)
	{
		if(ev)			//Moz
		{
			return ev.keyCode;
		}
		if(window.event)	//IE
		{
			return window.event.keyCode;
		}
	};

	/********************************************************
	Helper function to determine the event source element in a 
	browser-independent manner.
	********************************************************/
	this.getEventSource = function(ev)
	{
		if(ev)			//Moz
		{
			return ev.target;
		}
	
		if(window.event)	//IE
		{
			return window.event.srcElement;
		}
	};

	/********************************************************
	Helper function to cancel an event in a 
	browser-independent manner.
	(Returning false helps too).
	********************************************************/
	this.cancelEvent = function(ev)
	{
		if(ev)			//Moz
		{
			ev.preventDefault();
			ev.stopPropagation();
		}
		if(window.event)	//IE
		{
			window.event.returnValue = false;
		}
	}
}

//counter to help create unique ID's
var idCounter = 0;
</script>

</head>
<body onload="document_onLoad();">
<a href="#" onclick="javascript:showQuick()">quicksilver</a>
<h1>Directory index</h1>
<p><a href="testhtml/clicked.html?i=up">..</a></p>
<p><a href="testhtml/clicked.html?i=up2">/up</a></p>
<p><a href="testhtml/clicked.html?i=docs">docs</a></p>
<p><a href="testhtml/clicked.html?i=sources">sources</a></p>
<p><a href="testhtml/clicked.html?i=.project">.project</a></p>
<p><a href="testhtml/clicked.html?i=document.html">document.html</a></p>
<p><a href="testhtml/clicked.html?i=s.doc">s.doc</a></p>
<p><a href="testhtml/clicked.html?i=s%20m.doc">s m.doc</a></p>
<div id="debugger"></div>




	<div id="autosuggest"><ul></ul></div>
	<!-- using onkeypress="return event.keyCode!=13" to disable browser's form handling on enter key -->
		<fieldset>
		<legend>State</legend>
		<p>(Up and down arrows highlight a suggestion. Tab key inserts the highlighted suggestion. Escape hides the list.)</p>
		<label for="txtQuickSilverSearch">Please enter a State:</label>
		<input type="text" name="txtQuickSilverSearch" id="txtQuickSilverSearch" />
		<script language="Javascript">
			new AutoSuggest(document.getElementById('txtQuickSilverSearch'), linkCache);
		</script>
		</fieldset>
</body>
</html>


