<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>Untitled Document</title>
<style type="text/css">
<!--
.top_bar_center_style {
	background-image: url(pics/top_bar_center_part.gif);
	background-repeat: repeat-x;
}
.quicksilver_window_style {
/*	border: 1px solid #7f9db9;*/
	border-left: 1px solid #c6c7c6;
	border-bottom: 1px solid #c6c7c6;
	border-right: 1px solid #c6c7c6;
}
.txt_quicksilver_input {
	font-family: Verdana, Arial, Helvetica, sans-serif;
	font-size: 12px;
	font-weight: bold;
	color: #66667e;
	text-decoration: none;
	border: 1px solid #66667e;
	width: 100%;
}
.quicksilver_window_mainarea {
	background-color: #e0dfe3;
}
.quicksilver_window_header {
	font-family: Verdana, Arial, Helvetica, sans-serif;
	font-size: 12px;
	font-weight: bold;
	color: #000000;
	text-decoration: none;
}
-->
</style>
<script type="text/javascript">
	var quicksilverWindow_moving = false;
	var txtQuickSilverInput_origStyle = "";
	function quicksilver_window_blink(bc){
		var qswin = document.getElementById("qswindow");
		var input = document.getElementById("txtQuickSilverInput");
		var blinkCount = bc;
		var inputStyle = "";
		
		if(!input){
			setTimeout("quicksilver_window_blink(" + bc + ")", 200);
		}else{
			if(txtQuickSilverInput_origStyle = "")txtQuickSilverInput_origStyle = input.style.backgroundColor;
			input.focus();
			if(input.style.backgroundColor != txtQuickSilverInput_origStyle){
				input.style.backgroundColor = txtQuickSilverInput_origStyle;
				setTimeout("quicksilver_window_blink(" + bc + ")", 100);
			}else{
				if(blinkCount < 3){
					input.style.backgroundColor = "#FFEE99";
					blinkCount++;
					setTimeout("quicksilver_window_blink(" + blinkCount + ")", 200);
				}
			}
		}
	}
	
	function quicksilverWindowTop_onMouseDown(){
		var quicksilverWindow_moving = true;
		event.cancelBubble();
		return false;
	}
	
	function quicksilverWindow_showWindow(){
		document.getElementById("qswindow").style.display = 'block';
	}
	
	function quicksilverWindow_hideWindow(){
		document.getElementById("qswindow").style.display = 'none';
	}
	
	function document_onMouseMove(){
		if(quicksilverWindow_moving){
			var qswin = document.getElementById("qswindow");
			qswin.offsetLeft = window.event.x;
			qswin.offsetTop = window.event.y;
		}
	}

	function document_onMouseUp(){
		quicksilverWindow_moving = false;
	}
	
	document.onmousemove = document_onMouseMove;
	document.onmouseup = document_onMouseUp;
	
	/*
	
document.onmousemove = mouseMove;

function mouseMove(ev){
	ev           = ev || window.event;
	var mousePos = mouseCoords(ev);
}

function mouseCoords(ev){
	if(ev.pageX || ev.pageY){
		return {x:ev.pageX, y:ev.pageY};
	}
	return {
		x:ev.clientX + document.body.scrollLeft - document.body.clientLeft,
		y:ev.clientY + document.body.scrollTop  - document.body.clientTop
	};
}	
//----------------------------------------------
document.onmouseup = mouseUp;
var dragObject     = null;

function makeClickable(object){
	object.onmousedown = function(){
		dragObject = this;
	}
}

function mouseUp(ev){
	dragObject = null;
}
//-----------------------------------------------

document.onmousemove = mouseMove;
document.onmouseup   = mouseUp;

var dragObject  = null;
var mouseOffset = null;

function getMouseOffset(target, ev){
	ev = ev || window.event;

	var docPos    = getPosition(target);
	var mousePos  = mouseCoords(ev);
	return {x:mousePos.x - docPos.x, y:mousePos.y - docPos.y};
}

function getPosition(e){
	var left = 0;
	var top  = 0;

	while (e.offsetParent){
		left += e.offsetLeft;
		top  += e.offsetTop;
		e     = e.offsetParent;
	}

	left += e.offsetLeft;
	top  += e.offsetTop;

	return {x:left, y:top};
}

function mouseMove(ev){
	ev           = ev || window.event;
	var mousePos = mouseCoords(ev);

	if(dragObject){
		dragObject.style.position = 'absolute';
		dragObject.style.top      = mousePos.y - mouseOffset.y;
		dragObject.style.left     = mousePos.x - mouseOffset.x;

		return false;
	}
}
function mouseUp(){
	dragObject = null;
}

function makeDraggable(item){
	if(!item) return;
	item.onmousedown = function(ev){
		dragObject  = this;
		mouseOffset = getMouseOffset(this, ev);
		return false;
	}
}
//-----------------------------------------------

//All code from the previous example is needed with the exception
//of the mouseUp function which is replaced below


var dropTargets = [];

function addDropTarget(dropTarget){
	dropTargets.push(dropTarget);
}

function mouseUp(ev){
	ev           = ev || window.event;
	var mousePos = mouseCoords(ev);

	for(var i=0; i<dropTargets.length; i++){
		var curTarget  = dropTargets[i];
		var targPos    = getPosition(curTarget);
		var targWidth  = parseInt(curTarget.offsetWidth);
		var targHeight = parseInt(curTarget.offsetHeight);

		if(
			(mousePos.x > targPos.x)                &&
			(mousePos.x < (targPos.x + targWidth))  &&
			(mousePos.y > targPos.y)                &&
			(mousePos.y < (targPos.y + targHeight))){
				// dragObject was dropped onto curTarget!
		}
	}

	dragObject   = null;
}



Finally we have all the pieces we need to create a fully function Drag/Drop script. The one thing we are going to throw in here is DOM manipulation. If you are not completely familiar with this please read my JavaScript Primer on DOM Manipulation.

The following code takes any "Container" or "Containers" and makes it possible to drag each item in those containers. It's the code behind the 2nd demo in this article. This code can be used to reorder lists, to position "Nav Windows" on the left and right of your page, or for any other number of functions you can think of.

We are going to step through the "Pseudo-code" but leave it to the reader to look through the actual code, which is thoroughly commented.

   1. When the document is first loaded we create a dragHelper DIV. This dragHelper is going to be the "Shadow" item that is dragged around when we start to drag an item. The actual item will not be dragged, just moved using insertBefore and appendChild. We hide this dragHelper to start with
   2. We have our mouseDown and mouseUp functions. To start with, all these functions do is record the state of the mouse button so that our variable, iMouseDown, is always true when the mouse button is down and always false when it is not.
   3. We create a global variable, DragDrops, and a function, CreateDragContainer. DragDrops contains "Sets" of containers that are related to eachother. Any arguments (containers) that are passed to CreateDragContainer are grouped together into a new set so that items can be moved freely between these containers. The CreateDragContainer function also ties each item in each container to the set it's in using setAttribute.
   4. Now that our code knows what set each item is in, we move to the mouseMove function. The mouseMove function first sets a variable, target, to whatever element the mouse is over. If this item is in a set (checked with getAttribute) we continue on:
         1. First we run a simple little script that changes the class of our target if necessary. This creates a rollover effect.
         2. We then check to see if the mouse button was just pressed (since the last time our code got here). If it was:
               1. We set our variable, curTarget, to the current item.
               2. We record the item's current position in the document so that we can put it back later, if necessary.
               3. We clone the current item into our dragHelper so that we can move around a "Shadow" copy of our item.
               4. Since we have an exact copy of our drag item in our dragHelper, the item that will always be under the mouse cursor, we must remove the dragObj attribute so that our code does not thing dragObj is in a set.
               5. We take a snapshot of the current position, width and height of every item in our set. We do this here so that we only have to do it once, when the item is first starting to be dragged. Otherwise we would have to do this every time the mouse moved, potentially hundreds of times per second. 
         3. If the mouse button was not just pressed we either have the same target we did before or we have no target. In either case we don't do anything at all. 
   5. We now check our curTarget variable. curTarget should only contain an object being dragged, so if it exists we are in the process of dragging an item:
         1. We start by moving our "Shadow" helper div to the mouse cursor. This is just a item that can be dragged as created previously in this article.
         2. We then check each container in the current set to see if our mouse is inside of that container.
               1. If the mouse is in a container we check each item in that container to see where the item we are dragging belongs.
               2. We then place the item we are dragging either before another item in the container or at the end of the container.
               3. Finally we make sure our item is visible. 
         3. If the mouse is not in a container we make the item we are dragging around is invisible.
   6. All that's left is to capture the mouseUp event:
         1. First we hide our dragHelper: it's no longer needed since we aren't dragging anything
         2. If the drag item is visible it's already in it's place in whatever container it belongs in and we're done.
         3. If the drag item is invisible we put it back where it was before this started.

	
	*/
	
	
</script>
</head>

<body>
<p>F&ouml;rslag p&aring; ikon som dyker upp i dropdownl&aring;dan med f&ouml;rslag vid &quot;ej tr&auml;ff&quot; ist&auml;llet f&ouml;r meddelande. &gt;&gt;  <img src="pics/no_search_hit_question_mark.gif" width="21" height="28" /></p>
<p>&nbsp;</p>
<p>F&ouml;rslag p&aring; utseende av QuickSilver-f&ouml;nstret. Den ska bli flyttbar s&aring; sm&aring;ningom ocks&aring;, som ett vanligt windowsf&ouml;nster... </p>
<div id="qswindow" style="position:absolute; top:200px; left:200px; display:none;">
<table width="300" border="0" cellpadding="0" cellspacing="0" class="quicksilver_window_style">
	<tr>
		<td>
			<table width="300" height="26" class="top_bar_center_style" border="0" cellpadding="0" cellspacing="0">
				<tr>
					<td class="quicksilver_window_header"><a onmousedown="quicksilverWindowTop_onMouseDown()">&nbsp;.: QuickSilver v.1.0 :.</a></td>
					<td width="21"><a href="javascript:quicksilverWindow_hideWindow();"><img src="pics/close_corner_button_normal.gif" border="0" /></a></td>
				</tr>
			</table>
		</td>
	</tr>
	<tr>
		<td class="quicksilver_window_mainarea" style="padding:10px;"><input id="txtQuickSilverInput" name="textfield" type="text" class="txt_quicksilver_input" /></td>
	</tr>
</table>
</div>


<input onclick="javascript:quicksilverWindow_showWindow();quicksilver_window_blink(0);" type="button" name="Button" value="Visa f&ouml;nster" />
</body>
</html>
