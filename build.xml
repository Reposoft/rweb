<?xml version="1.0"?>

<project name="repos" basedir="." default="compile">

	<property file="local.properties"/>
	<property file="build.properties"/>
	
	<target name="clean" description="Clean all output folders">
		<delete dir="${target.folder}"/>
	</target>
	
	<target name="preprocess" description="Copy to temp folder with filter">
		<copy todir="${source.folder}" includeemptydirs="true">
			<fileset dir="${development.folder}">
				<exclude name="**/.svn"/>
				<exclude name="test/**"/>
				<exclude name="lib/**"/>
			</fileset>
			<fileset dir="${development.folder}">
				<include name="lib/*.html"/>
				<include name="lib/*.php"/>
				<include name="lib/*/*.html"/>
				<include name="lib/*/*.php"/>
				<include name="lib/*/*.bat"/>
				<include name="lib/*/*.sh"/>
			</fileset>
		</copy>
	</target>
	
	<target name="compile" depends="clean, preprocess" description="Compile project to dist folder">
		<antcall target="encode.templates"></antcall>
		<!-- attempt compile tools in order of preference, they all produce the app folder if they consider themselves available -->
		<antcall target="compile.zendguard"></antcall>
		<antcall target="compile.phpcoder"></antcall>
		<antcall target="compile.copy"></antcall>
		
	</target>
	
	<target name="compile.check">
	    <condition property="compile.done">
	        <available file="${app.folder}"/>
	    </condition>
	</target>
	
	<target name="compile.copy" depends="compile.check" description="Fallback if no encoding method is found"
		unless="compile.done">
		<echo message="WARNING: Sources are plain copies. No PHP encoder found."/>
		<copy todir="${app.folder}">
			<fileset dir="${source.folder}"/>
		</copy>
	</target>
	
	<target name="compile.phpcoder" depends="compile.check" description="Open source encoder"
		unless="compile.done">
		<!-- after encoding with eaccelerator, clean the sources before test to see that there are no hardcoded references -->
		<echo message="Compiling PHP sources using PHPCoder/eAccelerator"/>
		<exec executable="php" dir="${tools.folder}/PHPCoder/">
			<arg value="repos-cli.php"/>
			<arg value="${source.folder}"/>
			<arg value="${app.folder}"/>
		</exec>
	</target>
	
	<target name="compile.zendguard" depends="compile.check" description="Expensive encoder"
		unless="compile.done">
		<!-- todo -->
	</target>
	
	<target name="install.smarty" depends="preprocess" description="Smarty is LGPL and can be redistributed">
		<exec executable="php" dir="${source.folder}/lib/smarty/">
			<arg value="install.php"/>
		</exec>
	</target>
	
	<!-- precompile html templates (this destroys the original templates so it really requires clean, preprocess, but if added them they will be executed twice in compile) -->
	
	<target name="encode.templates" depends="install.smarty">
		<!-- create a temporary config file -->
		<copy todir="${basedir}/admin" file="${source.folder}/_host/admin/repos.properties"/>
		<!-- treat every html file in the project as a template -->
		<apply executable="php" dir="${source.folder}/lib/smarty/" parallel="false" relative="true">
			<arg value="precompile.php"/>
			<srcfile/>
			<fileset dir="${source.folder}">
				<include name="open/**/*.html"/>
				<include name="edit/**/*.html"/>
			</fileset>
		</apply>
		<!-- done, mark template cache in CACHE_DIR as complete --> 
		<touch file="${source.folder}/lib/smarty/cache/COMPLETE"/>
		<!-- clean up, delete temp config -->
		<delete dir="${basedir}/admin"/>
	</target>
	
	<!-- below are targets that might be used during development -->
	
	<target name="dev.include.test" depends="compile" description="to test the distribution on a build machine, include test sources">
		<copy todir="${app.folder}">
			<fileset dir="${development.folder}">
				<include name="test/**"/>
				<exclude name="**/.svn"/>
			</fileset>
		</copy>
	</target>
	
	<target name="dev.www.debian" depends="dev.include.test" description="copy compiled package to www on bubba">
		<!-- causes IllegalArgumentException: day out of range 
		 could have a generic task and a property for www location instead 
		<copy todir="/var/www/html/repos/">
			<fileset dir="${app.folder}">
		</copy>
		<copy todir="/var/www/html/" file="${app.folder}/_host/html/index.php">
		-->
	</target>
	
</project>
