<?xml version="1.0"?>

<project name="repos" basedir="." default="dist">

	<property file="local.properties"/>
	<property file="build.properties"/>
	
	<property name="app.folder" value="${target.folder}/${app.name}" description="what we'll ship"/>
	
	<available file="${zend.guard.command}" property="zend.guard.available"/>
	
	<!-- rhino, used for javascript conpression, has issues with jamvm and sablevm, and Sun has no JRE for ARM -->
	<available file="/usr/lib/sablevm" property="java.arm" description="Java running on a non-standard VM"/>
		
	<target name="clean" description="Clean all output folders">
		<delete dir="${target.folder}"/>
	</target>
	
	<target name="preprocess" depends="clean" description="Copy to temp folder with filter">
		<mkdir dir="${target.folder}"/>
		<copy todir="${source.folder}" includeemptydirs="true">
			<fileset dir="${development.folder}">
				<exclude name="**/.svn"/>
				<exclude name="test/**"/>
				<exclude name="lib/**"/>
			</fileset>
			<fileset dir="${development.folder}">
				<include name="lib/*.html"/>
				<include name="lib/*.php"/>
				<include name="lib/*/*.html"/>
				<include name="lib/*/*.php"/>
				<include name="lib/*/*.bat"/>
				<include name="lib/*/*.sh"/>
			</fileset>
		</copy>
	</target>
	
	<target name="compile" depends="preprocess"
			description="Template method for compiling everything to an application folder ready for distributiion">
		<antcall target="encode.templates"></antcall>
		<antcall target="encode.javascript"></antcall>
		<!-- bundled dependency should keep original source code -->
		<move file="${source.folder}/lib/smarty/libs" tofile="${target.folder}/exclude-smarty-libs"/>
		<!-- attempt compile tools in order of preference, they all produce the app folder if they consider themselves available -->
		<antcall target="compile.zendguard"></antcall>
		<antcall target="compile.phpcoder"></antcall>
		<antcall target="compile.copy"></antcall>
		<!-- done -->
		<move file="${target.folder}/exclude-smarty-libs" tofile="${app.folder}/lib/smarty/libs"/>
		<antcall target="postprocess"></antcall>
	</target>
	
	<target name="postprocess">
		<chmod file="${app.folder}/_host/admin/reposrun.sh" perm="ug+x"/>
		<chmod file="${app.folder}/lib/tinymce" perm="ug+w"/>
		<chmod file="${app.folder}/lib/dpsyntax" perm="ug+w"/>
	</target>
	
	<target name="compile.check" description="Checks if source compilation has been done">
	    <condition property="compile.done">
	        <available file="${app.folder}"/>
	    </condition>
	</target>
	
	<target name="compile.copy" depends="compile.check" description="Fallback if no encoding method is found"
		unless="compile.done">
		<echo message="WARNING: Sources are plain copies. No PHP encoder found."/>
		<copy todir="${app.folder}">
			<fileset dir="${source.folder}"/>
		</copy>
	</target>
	
	<target name="compile.phpcoder" depends="compile.check" description="Open source encoder"
		unless="compile.done">
		<!-- after encoding with eaccelerator, clean the sources before test to see that there are no hardcoded references -->
		<echo message="Compiling PHP sources using PHPCoder/eAccelerator"/>
		<exec executable="php" dir="${tools.folder}/PHPCoder/">
			<arg value="repos-cli.php"/>
			<arg value="${source.folder}"/>
			<arg value="${app.folder}"/>
		</exec>
	</target>
	
	<target name="compile.zendguard" depends="compile.check" if="zend.guard.available" description="Expensive encoder"
		unless="compile.done">
		<exec executable="${zend.guard.command}" dir="${target.folder}">
			<arg value="--recursive"/>
			<arg value="--obfuscation-level"/>
			<arg value="${zend.guard.level}"/>
			<arg value="--ignore"/>
			<arg value="${zend.guard.ignore}"/>
			<arg value="--license-product"/>
			<arg value="${zend.guard.product}"/>
			<arg value="${source.folder}"/>
			<arg value="${app.folder}"/>
		</exec>		
	</target>
	
	<target name="install.smarty" depends="" description="Smarty is LGPL and can be redistributed">
		<exec executable="php" dir="${source.folder}/lib/smarty/">
			<arg value="install.php"/>
		</exec>
	</target>
	
	<!-- precompile html templates (this destroys the original templates so it really requires clean, preprocess, but if added them they will be executed twice in compile) -->
	
	<target name="encode.templates" depends="install.smarty">
		<!-- create a temporary config file -->
		<copy todir="${basedir}/admin" file="${source.folder}/_host/admin/repos.properties"/>
		<!-- treat every html file in the project as a template -->
		<apply executable="php" dir="${source.folder}/lib/smarty/" parallel="false" relative="true">
			<arg value="precompile.php"/>
			<srcfile/>
			<fileset dir="${source.folder}">
				<include name="open/**/*.html"/>
				<include name="edit/**/*.html"/>
			</fileset>
		</apply>
		<!-- done, mark template cache in CACHE_DIR as complete --> 
		<touch file="${source.folder}/lib/smarty/cache/COMPLETE"/>
		<!-- clean up, delete temp config -->
		<delete dir="${basedir}/admin"/>
		<!-- TODO exclude smarty from compile? -->
	</target>
	
	<target name="get.rhino">
		<get dest="${encode.js.jar}" usetimestamp="true"
			src="http://repo1.maven.org/maven2/rhino/js/1.6R5/js-1.6R5.jar"/>
	</target>
	
	<target name="encode.javascript" depends="get.rhino"
			description="Selects javascript encoding and processes all scripts">
		<!-- scripts may have be suitable for different encoders, select individually -->
		<antcall target="encode.javascript.select.jsmin"></antcall>
		<antcall target="encode.javascript.run">
			<param name="encode.js.source" value="${source.folder}/plugins/details/details.js"/>
			<param name="encode.js.target" value="${source.folder}/plugins/details/details.js"/>
		</antcall>
		<antcall target="encode.javascript.run">
			<param name="encode.js.source" value="${source.folder}/plugins/dateformat/dateformat.js"/>
			<param name="encode.js.target" value="${source.folder}/plugins/dateformat/dateformat.js"/>
		</antcall>
		<antcall target="encode.javascript.run">
			<param name="encode.js.source" value="${source.folder}/plugins/filename/filename.js"/>
			<param name="encode.js.target" value="${source.folder}/plugins/filename/filename.js"/>
		</antcall>
		<delete file="${encode.js.script}"/>
	</target>
	
	<target name="encode.javascript.run" depends="encode.javascript.run.arm" unless="java.arm"
			description="Encodes a single js file using the current encoding script">
		<echo message="Encoding ${encode.js.target}"/>
		<java jar="${encode.js.jar}" fork="true">
          <arg value="${encode.js.script}" />
          <arg value="${encode.js.source}" />
          <arg value="${encode.js.target}" />
      </java>
	</target>

	<target name="encode.javascript.run.arm" if="java.arm">
		<exec executable="${tools.folder}/js/jsmin.arm"
			input="${encode.js.source}" output="${target.folder}/encoded.tmp">
		</exec>
		<move file="${target.folder}/encoded.tmp" tofile="${encode.js.target}" overwrite="true" />
	</target>
	
	<target name="encode.javascript.select.lite" description="from jquery">
		<echo file="${encode.js.script}">
		load("build/js/writeFile.js");
		var blockMatch = /\s*\/\*\*\s*((.|\n|\r\n)*?)\s*\*\/\n*/g;
		var f = readFileCustomized(arguments[0]).replaceAll( blockMatch, "\n" ).replaceAll( /\n\n+/g, "\n\n" );
		writeFile( arguments[1], f );
		</echo>
	</target>
	
	<target name="encode.javascript.select.jsmin" description="http://www.crockford.com/javascript/jsmin.html">
		<echo file="${encode.js.script}">
		load("build/js/jsmin.js", "build/js/writeFile.js");
		/* have to use Rhino's built in reader (which fails in SableVM) for jsmin to work */
		var f = jsmin('', readFile(arguments[0]), 3);
		writeFile( arguments[1], f );
		</echo>
	</target>
	
	<target name="dist.clean" description="Delete intermediate files">
		<delete dir="${source.folder}"/>
	</target>
	
	<target name="package.gzip" depends="compile" description="Create distributable archive">
		<!-- the archive should contain one folder, the application folder with app.name -->
		<tar tarfile="${package.gzip}.tmp" basedir="${target.folder}" includes="${app.name}/**"/>
		<gzip zipfile="${package.gzip}" src="${package.gzip}.tmp"/>
		<delete file="${package.gzip}.tmp"/>
	</target>
	
	<target name="dist" depends="dist.clean, package.gzip">
	
	</target>
	
	<!-- below are targets that might be used during development -->
	
	<target name="dev.include.test" depends="compile" description="to test the distribution on a build machine, include test sources">
		<echo message="WARNING: Including all test sources in distribution."/>
		<copy todir="${app.folder}">
			<fileset dir="${development.folder}">
				<include name="test/**"/>
				<exclude name="**/.svn"/>
			</fileset>
		</copy>
	</target>
	
	<target name="dev.www.debian" depends="dev.include.test" description="copy compiled package to www on bubba">
		<!-- could have a generic task and a property for www location instead -->
		<copy todir="/var/www/html/repos/">
			<fileset dir="${app.folder}"/>
		</copy>
		<copy todir="/var/www/html/" file="${app.folder}/_host/html/index.php"/>
	</target>
	
</project>
