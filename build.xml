<?xml version="1.0" encoding="UTF-8"?>

<project name="repos" basedir="." default="dist">

	<property file="local.properties"/>
	<property file="build.properties"/>
	
	<filter token="Dev" value="${app.version}${app.flag}"/>
	
	<property name="app.folder" value="${target.folder}/${app.name}" description="what we'll ship"/>
	
	<available file="${zend.guard.command}" property="zend.guard.available"/>
	
	<property name="cache.smarty.file" value="${tools.folder}/cached-smarty.tar"/>
	<available file="${cache.smarty.file}" property="cache.smarty.available"/>
		
	<target name="clean" description="Clean all output folders">
		<delete dir="${source.folder}" failonerror="true"/>
		<delete dir="${target.folder}" failonerror="true"/>
	</target>
	
	<target name="runtest" description="run all kinds of tests"
		depends="compile, text.xslt">
	</target>
	
	<target name="preprocess.js">
		<echo message="Building head.js from the available scripts and plugins in source"/>
		<ant dir="${development.folder}/scripts/"/>
	</target>

	<target name="preprocess" depends="clean, preprocess.js" description="Copy to temp folder with filter">
		<mkdir dir="${target.folder}"/>
		<echo message="Copying distributable application contents to intermediate folder"/>
		<copy todir="${source.folder}" includeemptydirs="true">
			<fileset dir="${development.folder}">
				<exclude name="**/.svn"/>
				<exclude name="scripts/**"/>
				<exclude name="test/**"/>
				<exclude name="lib/**"/>
			</fileset>
			<fileset dir="${development.folder}">
				<include name="scripts/head.js"/>
				<include name="lib/*.html"/>
				<include name="lib/*.php"/>
				<include name="lib/*/*.html"/>
				<include name="lib/*/*.php"/>
				<include name="lib/*/*.bat"/>
				<include name="lib/*/*.sh"/>
				<include name="lib/*/*LICENSE"/>
			</fileset>
		</copy>
		<copy todir="${source.folder}" filtering="true" overwrite="true">
			<fileset dir="${development.folder}">
				<include name="conf/repos.properties.php"/>
				<include name="index.html"/>
				<include name="open/start/*.html"/>
				<include name="view/*.xsl"/>
				<include name="scripts/head.js"/>
			</fileset>
		</copy>
	</target>
	
	<target name="compile" depends="preprocess"
			description="Template method for compiling everything to an application folder ready for distributiion">
		<antcall target="encode.templates"></antcall>
		<antcall target="encode.xslt"></antcall>
		<antcall target="compile.excludes"></antcall>
		<!-- attempt compile tools in order of preference, they all produce the app folder if they consider themselves available -->
		<antcall target="compile.zendguard"></antcall>
		<antcall target="compile.phpcoder"></antcall>
		<antcall target="compile.copy"></antcall>
		<!-- done -->
		<antcall target="compile.excludes.restore"></antcall>
		<antcall target="postprocess"></antcall>
	</target>
	
	<target name="compile.excludes">
		<mkdir dir="${target.folder}/compile.excludes"/>
		<antcall target="compile.excludes.smarty"></antcall>
		<move todir="${target.folder}/compile.excludes">
			<fileset dir="${source.folder}" includes="admin/hostid/**"/>
		</move>
	</target>
	
	<target name="compile.excludes.smarty" unless="zend.guard.available"
			description="getting 'function does not exist' if encoding with Zend Guard without smarty sources">
		<move todir="${target.folder}/compile.excludes">
			<fileset dir="${source.folder}">
				<include name="lib/smarty/libs/**"/>
			</fileset>
		</move>
	</target>
	
	<target name="compile.excludes.restore">
		<echo message="Moving excluded files, plain source, to distribution"/>
		<move todir="${app.folder}">
			<fileset dir="${target.folder}/compile.excludes" includes="**/*"/>
		</move>
	</target>
	
	<target name="postprocess">
		<chmod file="${app.folder}/_host/admin/reposrun.sh" perm="ug+x"/>
		<chmod perm="ug+w" verbose="true">
			<dirset dir="${app.folder}">
				<include name="lib/tinymce"/>
				<include name="lib/dpsyntax"/>
				<include name="lib/simpletest"/>
				<include name="lib/selenium"/>
			</dirset>
		</chmod>
		<chmod file="${app.folder}/lib/dpsyntax" perm="ug+w"/>
	</target>
	
	<target name="compile.check" description="Checks if source compilation has been done">
	    <condition property="compile.done">
	        <available file="${app.folder}"/>
	    </condition>
	</target>
	
	<target name="compile.copy" depends="compile.check" description="Fallback if no encoding method is found"
		unless="compile.done">
		<echo message="WARNING: Sources are plain copies. No PHP encoder found."/>
		<copy todir="${app.folder}">
			<fileset dir="${source.folder}"/>
		</copy>
	</target>
	
	<target name="compile.phpcoder" depends="compile.check" description="Open source encoder"
		unless="compile.done">
		<!-- after encoding with eaccelerator, clean the sources before test to see that there are no hardcoded references -->
		<echo message="Compiling PHP sources using PHPCoder/eAccelerator"/>
		<exec executable="php" dir="${tools.folder}/PHPCoder/" failonerror="false">
			<arg value="repos-cli.php"/>
			<arg value="${source.folder}"/>
			<arg value="${app.folder}"/>
		</exec>
	</target>
	
	<target name="compile.zendguard" depends="compile.check" if="zend.guard.available" description="Expensive encoder"
		unless="compile.done">
		<!-- currently we have a problem with the cached open/start/index_en.html. When it is encoded we get a white page and error log says
		ALERT - canary mismatch on efree() - heap overflow detected (attacker '213.112.139.70', file 'repos/lib/smarty/cache/templates_c/%%0F^0F2^0F2FD2A3%%index_en.html.php', line 19 -->
		<exec executable="${zend.guard.command}" dir="${basedir}" failonerror="true">
			<arg value="--recursive"/>
			<arg value="--obfuscation-level"/>
			<arg value="${zend.guard.level}"/>
			<arg value="--ignore"/>
			<arg value="${zend.guard.ignore}"/>
			<arg value="--license-product"/>
			<arg value="${zend.guard.product}"/>
			<arg value="${source.folder}"/>
			<arg value="${app.folder}"/>
		</exec>		
	</target>
	
	<target name="install.smarty" depends="install.smarty.cached"
			description="Smarty is LGPL and can be redistributed">
		<exec executable="php" dir="${source.folder}/lib/smarty/" failonerror="true">
			<arg value="install.php"/>
		</exec>
		<antcall target="install.smarty.save"/>
	</target>
	
	<target name="install.smarty.save" unless="cache.smarty.available"
			description="cache the installed smarty (right after installation - not with cached templates)">
		<tar destfile="${cache.smarty.file}" basedir="${source.folder}/lib/smarty/"
					includes="libs/**,cache/**"/>
	</target>
	
	<target name="install.smarty.cached" if="cache.smarty.available"
			description="Avoid repeated downloads for subsequent builds">
		<untar src="${cache.smarty.file}" dest="${source.folder}/lib/smarty/"/>
	</target>
	
	<!-- precompile html templates (this destroys the original templates so it really requires clean, preprocess, but if added them they will be executed twice in compile) -->
	
	<target name="encode.templates" depends="install.smarty">
		<!-- treat every html file in the project as a template -->
		<apply executable="php" dir="${source.folder}/lib/smarty/" parallel="false" relative="true">
			<arg value="precompile.php"/>
			<srcfile/>
			<fileset dir="${source.folder}">
				<include name="open/**/*.html"/>
				<include name="edit/**/*.html"/>
				<include name="conf/**/*.html"/>
				<include name="account/**/*.html"/>
				<include name="admin/**/*.html"/>
			</fileset>
		</apply>
		<!-- done, mark template cache in CACHE_DIR as complete --> 
		<touch file="${source.folder}/lib/smarty/cache/COMPLETE"/>
	</target>
	
	<target name="encode.xslt" description="minimize our xslt">
		<apply executable="php" parallel="false" relative="false">
			<arg value="${tools.folder}/xslt/xslmin.php"/>
			<srcfile/>
			<fileset dir="${source.folder}">
				<include name="**/*.xsl"/>
			</fileset>
		</apply>
	</target>
	
	<target name="dist.clean" depends="" description="Delete intermediate files">
		<echo message="Removing intermediate source folder"/>
		<delete dir="${source.folder}"/>
		<delete dir="${target.folder}/compile.excludes"/>
	</target>
	
	<target name="docs" depends="docs.phpdoc, docs.php, docs.js">
	</target>
	
	<target name="docs.doxygen">
		<property name="docs.folder" value="${basedir}/documentation"
				description="part of OUTPUT_DIRECTORY in doxygen config files"/>
		<mkdir dir="${docs.folder}"/>
		<taskdef name="doxygen" classname="org.doxygen.tools.DoxygenTask"
			classpath="${tools.folder}/docs/ant_doxygen.jar" />
	</target>
	
	<target name="docs.php" depends="docs.doxygen">
		<!-- the doxygen task sucks because error output is not displayed -->
		<!-- use build/docs/makedocs.bat to troubleshoot and see syntax warnings -->
		<doxygen configfilename="${tools.folder}/docs/doxygen-php.cfg"/>
	</target>

	<target name="docs.js" depends="docs.doxygen">
		<!-- the doxygen task sucks because error output is not displayed -->
		<!-- use build/docs/makedocs.bat to troubleshoot and see syntax warnings -->
		<doxygen configfilename="${tools.folder}/docs/doxygen-js.cfg"/>
	</target>
	
	<target name="docs.phpdoc" if="false" description="DEPRECATED Code docs, requires: pear install PhpDocumentor">
		<exec executable="${development.folder}/lib/phpdoc/makedocs.bat" dir="${development.folder}/lib/phpdoc/"/>
	</target>
	
	<target name="package.web" depends="dist.clean" description="Create distributable archive">
		<tar destfile="${package.web.filename}.tgz" compression="gzip"
			basedir="${target.folder}" includes="${app.name}/**,${app.name}-plugins/**"/>
		<zip destfile="${package.web.filename}.zip" encoding="UTF8"
			basedir="${target.folder}" includes="${app.name}/**,${app.name}-plugins/**"/>
	</target>

	<target name="package.admin" depends="dist.clean" description="Admin addon to Repos Web">
		<tar destfile="${package.admin.filename}.tgz" compression="gzip">
			<tarfileset dir="${target.folder}">
				<include name="${app.name}-admin/**"/>
			</tarfileset>
		</tar>
	</target>
	
	<target name="package.backup" depends="dist.clean"
			description="Standalone minimal repos distribution for mirror hosts (no web)">
		<tar destfile="${package.backup.filename}.tgz" compression="gzip">
			<tarfileset dir="${target.folder}">
				<include name="${app.name}/conf/**"/>
				<include name="${app.name}-admin/*"/>
				<include name="${app.name}-admin/backup/**"/>
			</tarfileset>
		</tar>
	</target>

	<target name="package.tests" if="package.tests.filename"
			description="Create a package with the test sources">
		<!-- problems with utf-8 characters: <tar destfile="${package.tests.gzip}" compression="gzip" -->
		<zip destfile="${package.tests.filename}.zip" encoding="UTF8"
			basedir="${development.folder}" includes="test/**"/>
	</target>
	
	<target name="dist" description="Run all packaging activities"
		depends="runtest,package.web,package.admin,package.backup,package.tests">
	</target>
	
	<!-- below are targets that might be used during development, they do not produce packaged distribution -->
	
	<target name="dev.include.test" depends="compile" description="to test the distribution on a build machine, include test sources">
		<echo message="WARNING: Including all test sources in distribution."/>
		<copy todir="${app.folder}/test">
			<fileset dir="${development.folder}/test">
				<exclude name="**/.svn"/>
				<!-- seems utf-8 characters will be invalid after tar/gzip -->
				<exclude name="reset/testrepo/té*"/>
			</fileset>
		</copy>
	</target>
	
	<target name="dev.www.debian" depends="dev.include.test" description="copy compiled package to www on bubba">
		<!-- could have a generic task and a property for www location instead -->
		<delete dir="/var/www/html/repos"/>
		<copy todir="/var/www/html/repos">
			<fileset dir="${app.folder}"/>
		</copy>
		<copy todir="/var/www/html/" file="${app.folder}/_host/html/index.php"/>
	</target>
	
	<!-- debian packaging -->
	
	<target name="dist.debian" depends="dist">
		<copy todir="${target.folder}/debian-packages">
			<fileset dir="${tools.folder}/debian-packages">
				<exclude name="**/.svn"/>
			</fileset>
			<filterset>
		      <filter token="REPOSVERSION" value="${app.version}"/>
			  <filter token="REPOSBUILD" value="${app.version.build}"/>
		    </filterset>
		</copy>
		<copy todir="${target.folder}/debian-packages/repos.arm/var/www/html/repos">
			<fileset dir="${app.folder}"/>
		</copy>
		<copy todir="${target.folder}/debian-packages/repos-test.arm/var/www/html/repos/test">
			<fileset dir="${development.folder}/test"/>
		</copy>
		<chmod perm="755" verbose="true">
			<fileset dir="${target.folder}/debian-packages">
				<include name="**/*.sh"/>
				<include name="**/DEBIAN"/>
				<include name="**/postinst"/>
				<include name="**/prerm"/>
			</fileset>
		</chmod>
		<!-- todo use filter to set version in DEBIAN/control, use three digit version number and extra build number -->
		<exec dir="${target.folder}/debian-packages" executable="${target.folder}/debian-packages/package.sh">
		</exec>
	</target>

	<!-- Continuous Integration testing -->
	
	<property name="test.folder" location="${target.folder}/test"/>
	
	<target name="test.xslt.compile">
		<echo message="Generating sample index html from test xml"/>
		<mkdir dir="${test.folder}/samples" />
		<xslt force="true" basedir="${basedir}/test/xslt/index"
			destdir="${test.folder}/samples"
			style="${target.folder}/${app.name}/view/repos.xsl"
			includes="**/index*.xml" extension=".html">
			<param name="static" expression="../../repos/"/>
			<outputproperty name="indent" value="yes"/>
		</xslt>
	</target>
	
	<target name="text.xslt" depends="test.xslt.compile">
	</target>
	
</project>
